#!/usr/bin/env ruby

require 'thor'
require 'csv'
require_relative '../lib/ds/cli'

# TODO: No URIs for Scribes in prototype data set; need test data

class DSConvertCLI < DS::CLI
  DS.configure!

  def self.exit_on_failure?
    true
  end

  class_option :'output-csv', banner: 'FILE', desc: "Name of the output CSV file [default: output.csv]", default: 'output.csv', aliases: '-o'

  desc "marc XML [XML...]", "Convert MARC XML to DS CSV"
  long_desc <<-LONGDESC
    Convert MARC XML to DS CSV
  LONGDESC
  option :institution, banner: 'INSTITUTION', desc: "Short name of the institution to create this CSV for; REQUIRED", aliases: '-i'
  option :'holdings-file', banner: 'FILE', desc: 'Associated Holdings File (if separate from records)', aliases: '-f'
  def marc *files
    return false unless validate_files files
    Recon.update! unless skip_git? options

    inst_qid = DS::Institutions.find_qid options[:institution]
    abort "Not a known institution: #{options[:institution]}" unless inst_qid
    preferred_name = DS::Institutions.preferred_name options[:institution]

    converter = DS::MARCConverter.new inst_code: options[:institution],
                                      inst_qid: inst_qid,
                                      inst_name: preferred_name,
                                      timestamp: DS.timestamp,
                                      holdings_file: options[:'holdings-file']

    rows = select_input(files).flat_map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }

      converter.process_marc xml, source_file: source_file
    }
    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end

  desc "mets XML [XML...]", "Convert DS 1.0 METS XML to DS CSV"
  long_desc <<-LONGDESC
    Convert DS 1.0 METS XML to DS CSV
  LONGDESC
  def mets *files
    return false unless validate_files files
    Recon.update! unless skip_git? options

    converter = DS::DSMETSConverter.new timestamp: DS.timestamp

    rows = select_input(files).map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }

      converter.convert_mets xml, source_file: source_file

    }

    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end
  desc "openn XML [XML...]", "Convert OPenn TEI XML to DS CSV"
  long_desc <<-LONGDESC
    Convert OPenn TEI XML to DS CSV
  LONGDESC
  def openn *files
    return false unless validate_files files
    Recon.update! unless skip_git? options

    converter = DS::OPennTEIConverter.new timestamp: DS.timestamp

    rows = select_input(files).map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }

      converter.convert_openn_tei xml, source_file: source_file

    }
    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end

  protected

  def write_csv rows, options
    out_csv = options[:'output-csv']
    CSV.open out_csv, "w", headers: true do |csv|
      csv << DS::HEADINGS
      rows.each do |row|
        csv << row
      end
    end
    puts "Wrote: '#{out_csv}'"
  end

end

DSConvertCLI.start ARGV