#!/usr/bin/env ruby

require 'thor'
require 'csv'
require_relative '../lib/ds/cli'

# TODO: No URIs for Scribes in prototype data set; need test data

class DSConvertCLI < DS::CLI
  DS.configure!

  def self.exit_on_failure?
    true
  end

  class_option :'output-csv', banner: 'FILE', desc: "Name of the output CSV file [default: output.csv]", default: 'output.csv', aliases: '-o'

  desc "marc XML [XML...]", "Convert MARC XML to DS CSV"
  long_desc <<-LONGDESC
    Convert MARC XML to DS CSV
  LONGDESC
  option :institution, banner: 'INSTITUTION', desc: "Short name of the institution to create this CSV for; REQUIRED", aliases: '-i'
  option :'holdings-file', banner: 'FILE', desc: 'Associated Holdings File (if separate from records)', aliases: '-f'
  def marc *files
    return false unless validate_files files
    Recon.update! unless skip_git? options

    inst_qid = DS::Institutions.find_qid options[:institution]
    abort "Not a known institution: #{options[:institution]}" unless inst_qid
    preferred_name = DS::Institutions.preferred_name options[:institution]

    converter = DS::MARCConverter.new inst_code: options[:institution],
                                      inst_qid: inst_qid,
                                      inst_name: preferred_name,
                                      timestamp: DS.timestamp,
                                      holdings_file: options[:'holdings-file']

    rows = select_input(files).flat_map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }

      converter.process_marc xml, source_file: source_file
    }
    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end

  desc "mets XML [XML...]", "Convert DS 1.0 METS XML to DS CSV"
  long_desc <<-LONGDESC
    Convert DS 1.0 METS XML to DS CSV
  LONGDESC
  def mets *files
    return false unless validate_files files
    Recon.update! unless skip_git? options
    timestamp = DS.timestamp

    rows = select_input(files).map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }

      source_type                        = 'digital-scriptorium'
      holding_institution_as_recorded    = DS::DS10.extract_institution_name xml
      holding_institution                = DS::Institutions.find_qid holding_institution_as_recorded
      holding_institution_id_number      = ''
      holding_institution_shelfmark      = DS::DS10.extract_shelfmark xml
      link_to_holding_institution_record = DS::DS10.extract_link_to_inst_record xml
      production_place_as_recorded       = DS::DS10.extract_production_place xml
      production_place                   = Recon::Places.lookup production_place_as_recorded.split('|'), from_column: 'structured_value'
      production_place_label             = Recon::Places.lookup production_place_as_recorded.split('|'), from_column: 'authorized_label'
      production_date_as_recorded        = DS::DS10.extract_date_as_recorded xml
      production_date                    = DS::DS10.transform_production_date xml
      century                            = DS.transform_dates_to_centuries production_date
      century_aat                        = DS.transform_centuries_to_aat century
      dated                              = DS::DS10.dated_by_scribe? xml
      uniform_title_as_recorded          = ''
      uniform_title_agr                  = ''
      title_as_recorded                  = DS::DS10.extract_title xml
      title_as_recorded_agr              = ''
      standard_title                     = Recon::Titles.lookup(title_as_recorded.split('|'), column: 'authorized_label').join('|')
      genre_as_recorded                  = ''
      subject_as_recorded                = ''
      author_as_recorded                 = DS::DS10.extract_text_name xml, 'author'
      author_as_recorded_agr             = ''
      author_wikidata                    = Recon::Names.lookup(author_as_recorded.split('|'), column: 'structured_value').join '|'
      author                             = ''
      author_instance_of                 = Recon::Names.lookup(author_as_recorded.split('|'), column: 'instance_of').join '|'
      author_label                       = Recon::Names.lookup(author_as_recorded.split('|'), column: 'authorized_label').join '|'
      artist_as_recorded                 = DS::DS10.extract_part_name xml, 'artist'
      artist_as_recorded_agr             = ''
      artist_wikidata                    = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'structured_value').join '|'
      artist                             = ''
      artist_instance_of                 = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'instance_of').join '|'
      artist_label                       = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'authorized_label').join '|'
      scribe_as_recorded                 = DS::DS10.extract_part_name xml, 'scribe'
      scribe_as_recorded_agr             = ''
      scribe_wikidata                    = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'structured_value').join '|'
      scribe                             = ''
      scribe_instance_of                 = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'instance_of').join '|'
      scribe_label                       = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'authorized_label').join '|'
      language_as_recorded               = DS::DS10.extract_language xml
      language                           = Recon::Languages.lookup language_as_recorded, from_column: 'structured_value'
      language_label                     = Recon::Languages.lookup language_as_recorded, from_column: 'authorized_label'
      former_owner_as_recorded           = DS::DS10.extract_ownership xml
      former_owner_as_recorded_agr       = ''
      # TODO: Legacy XML doesn't have former owner names; the following can't be tested
      former_owner_wikidata              = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'structured_value').join '|'
      former_owner                       = ''
      former_owner_instance_of           = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'instance_of').join '|'
      former_owner_label                 = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'authorized_label').join '|'
      material_as_recorded               = DS::DS10.extract_support xml
      material                           = Recon::Materials.lookup material_as_recorded.split('|'), column: 'structured_value'
      material_label                     = Recon::Materials.lookup material_as_recorded.split('|'), column: 'authorized_label'
      physical_description               = DS::DS10.extract_physical_description xml
      note                               = DS::DS10.extract_note(xml).join '|'
      acknowledgements                   = DS::DS10.extract_acknowledgements xml
      data_processed_at                  = timestamp
      data_source_modified               = DS::DS10.source_modified

      { source_type:                        source_type,
        holding_institution:                holding_institution,
        holding_institution_as_recorded:    holding_institution_as_recorded,
        holding_institution_id_number:      holding_institution_id_number,
        holding_institution_shelfmark:      holding_institution_shelfmark,
        link_to_holding_institution_record: link_to_holding_institution_record,
        production_date:                    production_date,
        production_place_as_recorded:       production_place_as_recorded,
        production_place:                   production_place,
        production_place_label:             production_place_label,
        century:                            century,
        century_aat:                        century_aat,
        production_date_as_recorded:        production_date_as_recorded,
        dated:                              dated,
        uniform_title_as_recorded:          uniform_title_as_recorded,
        uniform_title_agr:                  uniform_title_agr,
        title_as_recorded:                  title_as_recorded,
        title_as_recorded_agr:              title_as_recorded_agr,
        standard_title:                     standard_title,
        genre_as_recorded:                  genre_as_recorded,
        subject_as_recorded:                subject_as_recorded,
        author_as_recorded:                 author_as_recorded,
        author_as_recorded_agr:             author_as_recorded_agr,
        author_wikidata:                    author_wikidata,
        author:                             author,
        author_instance_of:                 author_instance_of,
        author_label:                       author_label,
        artist_as_recorded:                 artist_as_recorded,
        artist_as_recorded_agr:             artist_as_recorded_agr,
        artist_wikidata:                    artist_wikidata,
        artist:                             artist,
        artist_instance_of:                 artist_instance_of,
        artist_label:                       artist_label,
        scribe_as_recorded:                 scribe_as_recorded,
        scribe_as_recorded_agr:             scribe_as_recorded_agr,
        scribe_wikidata:                    scribe_wikidata,
        scribe:                             scribe,
        scribe_instance_of:                 scribe_instance_of,
        scribe_label:                       scribe_label,
        language_as_recorded:               language_as_recorded,
        language:                           language,
        language_label:                     language_label,
        former_owner_as_recorded:           former_owner_as_recorded,
        former_owner_as_recorded_agr:       former_owner_as_recorded_agr,
        former_owner_wikidata:              former_owner_wikidata,
        former_owner:                       former_owner,
        former_owner_instance_of:           former_owner_instance_of,
        former_owner_label:                 former_owner_label,
        material_as_recorded:               material_as_recorded,
        material:                           material,
        material_label:                     material_label,
        physical_description:               physical_description,
        note:                               note,
        acknowledgements:                   acknowledgements,
        data_processed_at:                  data_processed_at,
        data_source_modified:               data_source_modified,
        source_file:                        source_file,
      }
    }

    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end

  desc "openn XML [XML...]", "Convert OPenn TEI XML to DS CSV"
  long_desc <<-LONGDESC
    Convert OPenn TEI XML to DS CSV
  LONGDESC
  def openn *files
    return false unless validate_files files
    Recon.update! unless skip_git? options
    timestamp = DS.timestamp
    rows = select_input(files).map { |in_xml|
      source_file = in_xml.chomp # remove newline in case input if from ARGF
      xml = File.open(source_file) { |f| Nokogiri::XML(f) }
      xml.remove_namespaces!

      source_type                        = 'openn-tei'
      holding_institution_as_recorded    = xml.xpath('(//msIdentifier/institution|//msIdentifier/repository)[1]').text
      holding_institution                = DS::Institutions.find_qid holding_institution_as_recorded
      holding_institution_id_number      = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/msIdentifier/altIdentifier[@type="bibid"]/idno').text()
      holding_institution_shelfmark      = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/msIdentifier/idno[@type="call-number"]').text()
      link_to_holding_institution_record = xml.xpath('//altIdentifier[@type="resource"][1]').text.strip
      production_place_as_recorded       = xml.xpath('//origPlace/text()').map(&:to_s).join '|'
      production_place                   = Recon::Places.lookup production_place_as_recorded.split('|'), from_column: 'structured_value'
      production_place_label             = Recon::Places.lookup production_place_as_recorded.split('|'), from_column: 'authorized_label'
      production_date_as_recorded        = DS::OPennTEI.extract_production_date xml, range_sep: '-'
      production_date                    = DS::OPennTEI.extract_production_date xml, range_sep: '^'
      century                            = DS.transform_dates_to_centuries production_date
      century_aat                        = DS.transform_centuries_to_aat century
      title_as_recorded                  = xml.xpath('//msItem[1]/title/text()').map(&:to_s).join '|'
      standard_title                     = Recon::Titles.lookup(title_as_recorded.split('|'), column: 'authorized_label').join('|')
      author_as_recorded                 = xml.xpath('//msItem/author/text()').map(&:to_s).join '|'
      author_wikidata                    = Recon::Names.lookup(author_as_recorded.split('|'), column: 'structured_value').join '|'
      author                             = ''
      author_instance_of                 = Recon::Names.lookup(author_as_recorded.split('|'), column: 'instance_of').join '|'
      author_label                       = Recon::Names.lookup(author_as_recorded.split('|'), column: 'authorized_label').join '|'
      artist_as_recorded                 = DS::OPennTEI.extract_resp_names nodes: xml.xpath('//msContents/msItem'), types: 'artist'
      artist_wikidata                    = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'structured_value').join '|'
      artist                             = ''
      artist_instance_of                 = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'instance_of').join '|'
      artist_label                       = Recon::Names.lookup(artist_as_recorded.split('|'), column: 'authorized_label').join '|'
      scribe_as_recorded                 = DS::OPennTEI.extract_resp_names nodes: xml.xpath('//msContents/msItem'), types: 'scribe'
      scribe_wikidata                    = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'structured_value').join '|'
      scribe                             = ''
      scribe_instance_of                 = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'instance_of').join '|'
      scribe_label                       = Recon::Names.lookup(scribe_as_recorded.split('|'), column: 'authorized_label').join '|'
      language_as_recorded               = DS::OPennTEI.extract_language_as_recorded xml
      language                           = Recon::Languages.lookup language_as_recorded, from_column: 'structured_value'
      language_label                     = Recon::Languages.lookup language_as_recorded, from_column: 'authorized_label'
      illuminated_initials               = ''
      miniatures                         = ''
      former_owner_as_recorded           = DS::OPennTEI.extract_resp_names nodes: xml.xpath('//msContents/msItem'), types: 'former owner'
      former_owner_wikidata              = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'structured_value').join '|'
      former_owner                       = ''
      former_owner_instance_of           = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'instance_of').join '|'
      former_owner_label                 = Recon::Names.lookup(former_owner_as_recorded.split('|'), column: 'authorized_label').join '|'
      material_as_recorded               = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/physDesc/objectDesc/supportDesc/support/p').text
      material                           = Recon::Materials.lookup material_as_recorded.split('|'), column: 'structured_value'
      material_label                     = Recon::Materials.lookup material_as_recorded.split('|'), column: 'authorized_label'
      physical_description               = DS::OPennTEI.extract_physical_description xml
      acknowledgements                   = ''
      binding_description                = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/physDesc/bindingDesc/binding/p/text()').text
      folios                             = ''
      extent_as_recorded                 = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/physDesc/objectDesc/supportDesc/extent/text()').text.strip
      dimensions                         = ''
      dimensions_as_recorded             = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/physDesc/objectDesc/supportDesc/extent/text()').text.strip
      decoration                         = xml.xpath('/TEI/teiHeader/fileDesc/sourceDesc/msDesc/physDesc/decoDesc/decoNote[not(@n)]/text()').text
      note                               = DS::OPennTEI.extract_note(xml).join '|'
      data_processed_at                  = timestamp
      data_source_modified               = DS::OPennTEI.source_modified xml

      # TODO: BiblioPhilly MSS have keywords (not subjects, genre); include them?

      {
        source_type:                        source_type,
        holding_institution:                holding_institution,
        holding_institution_as_recorded:    holding_institution_as_recorded,
        holding_institution_id_number:      holding_institution_id_number,
        holding_institution_shelfmark:      holding_institution_shelfmark,
        link_to_holding_institution_record: link_to_holding_institution_record,
        production_place_as_recorded:       production_place_as_recorded,
        production_place:                   production_place,
        production_place_label:             production_place_label,
        production_date_as_recorded:        production_date_as_recorded,
        production_date:                    production_date,
        century:                            century,
        century_aat:                        century_aat,
        title_as_recorded:                  title_as_recorded,
        standard_title:                     standard_title,
        author_as_recorded:                 author_as_recorded,
        author_wikidata:                    author_wikidata,
        author:                             author,
        author_instance_of:                 author_instance_of,
        author_label:                       author_label,
        artist_as_recorded:                 artist_as_recorded,
        artist_wikidata:                    artist_wikidata,
        artist:                             artist,
        artist_instance_of:                 artist_instance_of,
        artist_label:                       artist_label,
        scribe_as_recorded:                 scribe_as_recorded,
        scribe_wikidata:                    scribe_wikidata,
        scribe:                             scribe,
        scribe_instance_of:                 scribe_instance_of,
        scribe_label:                       scribe_label,
        language_as_recorded:               language_as_recorded,
        language:                           language,
        language_label:                     language_label,
        illuminated_initials:               illuminated_initials,
        miniatures:                         miniatures,
        former_owner_as_recorded:           former_owner_as_recorded,
        former_owner_wikidata:              former_owner_wikidata,
        former_owner:                       former_owner,
        former_owner_instance_of:           former_owner_instance_of,
        former_owner_label:                 former_owner_label,
        material:                           material,
        material_as_recorded:               material_as_recorded,
        material_label:                     material_label,
        physical_description:               physical_description,
        acknowledgements:                   acknowledgements,
        binding:                            binding_description,
        folios:                             folios,
        extent_as_recorded:                 extent_as_recorded,
        dimensions:                         dimensions,
        dimensions_as_recorded:             dimensions_as_recorded,
        decoration:                         decoration,
        note:                               note,
        data_processed_at:                  data_processed_at,
        data_source_modified:               data_source_modified,
        source_file:                        source_file,
      }
    }
    validate! rows unless options[:'skip-validation']
    write_csv rows, options
  end

  protected

  def write_csv rows, options
    out_csv = options[:'output-csv']
    CSV.open out_csv, "w", headers: true do |csv|
      csv << DS::HEADINGS
      rows.each do |row|
        csv << row
      end
    end
    puts "Wrote: '#{out_csv}'"
  end

end

DSConvertCLI.start ARGV