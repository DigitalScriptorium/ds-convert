#!/usr/bin/env ruby

require 'thor'
require 'csv'
require_relative '../lib/ds/cli'

class ReconCLI < DS::CLI
  DS.configure!

  def self.exit_on_failure?
    true
  end

  class_option :tag, banner: 'TAG', desc: "Append tag to output csv name; e.g., 'penn' => 'names-penn.csv'", aliases: '-a'
  class_option :directory, banner: 'PATH', desc: "Output directory", aliases: '-o', default: '.'
  class_option :'source-type', banner: 'TYPE', desc: "One of #{DS::SOURCE_TYPES.join(', ')}; REQUIRED", aliases: '-t', required: (ARGV.size > 0 && ARGV[0] != 'recon-update')
  class_option :verbose, desc: "Print full error messages", aliases: '-v', type: :boolean, default: false

  desc "names FILES", "Extract names from one or more FILEs"
  long_desc <<-LONGDESC
    Extract names from one or more FILEs.

    Use '-' to read a list of files from standard input:

      cat list_of_files | recon names -t mets -
  LONGDESC

  def names *files
    # TODO: Add role column to names
    return false unless validate_args files

    out_csv = out_file 'names', options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = Names.from_marc select_input files
      when 'mets'
        data = Names.from_mets select_input files
      when 'tei'
        data = Names.from_tei select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:'skip-validation']
      write_csv out_csv, Names::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "places FILES", "Extract place names from one or more FILEs"
  long_desc <<-LONGDESC
    Extract place names from one or more FILEs.

    Use '-' to read a list of files from standard input:

      cat list_of_files | recon places -t mets -
  LONGDESC
  def places *files
    return false unless validate_args files

    out_csv = out_file 'places', options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = Places.from_marc select_input files
      when 'mets'
        data = Places.from_mets select_input files
      when 'tei'
        data = Places.from_tei select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Places::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "subjects FILES", "Extract LC subjects (650, 651 or 600, 610)"
  long_desc <<-LONGDESC
  Extract LC subjects from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon subjects -t marc -

  By default MARC fields 650, 651 are extracted, but fields 600, 610 are extracted if `--named-subjects` is given.

  NOTE: Not implemented for mets or tei source types.

LONGDESC
  option :'named-subjects', desc: 'LCSH named subjects 600, 610', aliases: '-n', type: :boolean, default: false
  def subjects *files
    return false unless validate_args files

    base    = options[:'named-subjects'] ? 'named-subjects' : 'subjects'
    klass   = options[:'named-subjects'] ? NamedSubjects : Subjects
    tags    = options[:'named-subjects'] ? [600, 610] : [650, 651]
    out_csv = out_file base, options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = klass.from_marc select_input(files), tags: tags
      when 'mets'
        data = klass.from_mets select_input files
      when 'tei'
        data = klass.from_tei select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Subjects::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "genres FILES", "Extract genre terms (655)"
  long_desc <<-LONGDESC
  Extract genre terms from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon genres -t marc -

  NOTE: Not implemented for mets or tei source types.

  LONGDESC
  def genres *files
    return false unless validate_args files

    out_csv = out_file 'genres', options

    begin
      Recon.update! unless skip_git? options
      data = nil
      case options[:'source-type']
      when 'marc'
        data = Genres.from_marc select_input files
      when 'mets'
      when 'tei'
      else
        raise NotImplementedError, "No method for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Genres::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "materials FILES", "Extract materials"
  long_desc <<-LONGDESC
  Extract materials terms from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon materials -t mets -
  LONGDESC
  def materials *files
    return false unless validate_args files

    out_csv = out_file 'materials', options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = Materials.from_marc select_input files
      when 'mets'
        data = Materials.from_mets select_input files
      when 'tei'
        data = Materials.from_tei select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Materials::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "languages FILES", "Extract languages"
  long_desc <<-LONGDESC
  Extract languages from one or more files.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon languages -t mets -
  LONGDESC
  def languages *files
    return false unless validate_args files

    out_csv = out_file 'languages', options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = Languages.from_marc select_input(files), separator: ';'
      when 'tei'
        data = Languages.from_tei select_input(files), separator: ';'
      when 'mets'
        data = Languages.from_mets select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:'source-type']}"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Languages::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  desc "titles FILES", "Extract titles"
  long_desc <<-LONGDESC
  Extract titles from one or more files.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon titles -t mets -
  LONGDESC
  def titles *files
    return false unless validate_args files

    out_csv = out_file 'titles', options
    begin
      Recon.update! unless skip_git? options

      case options[:'source-type']
      when 'marc'
        data = Titles.from_marc select_input files
      when 'tei'
        data = Titles.from_tei select_input files
      when 'mets'
        data = Titles.from_mets select_input files
      else
        raise NotImplementedError, "No method for source type: '#{options[:'source-type']}"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Titles::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  protected

  def validate_args files
    return true if read_from_stdin? files
    cannot_find = files.reject { |f| File.exist?(f) }
    return true if cannot_find.empty?

    puts "Can't find input file(s): #{cannot_find.join '; ' }"
    false
  end

  def out_file base, options
    csv_name = options[:tag] ? "#{base}-#{options[:tag]}.csv" : "#{base}.csv"
    File.join options[:directory], csv_name
  end

  def write_csv out_file, header, data
    CSV.open out_file, 'wb' do |csv|
      csv << header
      data.each do |row|
        csv << row
      end
    end
    puts "Wrote: #{out_file}"
  end
end

ReconCLI.start ARGV