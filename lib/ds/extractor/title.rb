# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

module DS
  module Extractor
    # Represents a title with specific attributes.
    class Title
      # @!attribute [rw] as_recorded
      #   @return [String] the title as recorded
      attr_accessor :as_recorded

      # @!attribute [rw] vernacular
      #   @return [String] the vernacular form of the title
      attr_accessor :vernacular

      # @!attribute [rw] label
      #   @return [String] a label associated with the title
      attr_accessor :label

      # @!attribute [rw] uri
      #   @return [String] a uri associated with the title
      attr_accessor :uri

      # Initializes a new instance of the Title class.
      #
      # @param [String] as_recorded the title as recorded
      # @param [String] vernacular the vernacular form of the title
      # @param [String] label a label associated with the title
      # @param [Boolean] keyword_init whether to use keyword initialization (default is true)
      def initialize as_recorded:, vernacular: nil, label: nil, uri: nil
        @as_recorded = as_recorded
        @vernacular = vernacular
        @label = label
        @uri = uri
      end

      # Returns an array representation of the attributes.
      #
      # @return [Array<String>] an array containing the attributes in order
      def to_a
        [as_recorded, vernacular, label, uri]
      end

      # Returns a hash representation of the attributes.
      #
      # @return [Hash{Symbol => String}] a hash with attribute names as keys and values as values
      def to_h
        {
          as_recorded: as_recorded,
          vernacular: vernacular,
          label: label,
          uri: uri
        }
      end
    end
  end
end