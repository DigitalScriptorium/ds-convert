# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

module DS
  module Extractor
    # Represents a name with specific attributes.
    class Name
      # @!attribute [rw] as_recorded
      #   @return [String] the name as recorded
      attr_accessor :as_recorded

      # @!attribute [rw] role
      #   @return [String] the role associated with the name
      attr_accessor :role

      # @!attribute [rw] vernacular
      #   @return [String] the vernacular form of the name
      attr_accessor :vernacular

      # @!attribute [rw] ref
      #   @return [String] a reference identifier for the name
      attr_accessor :ref

      # Initializes a new instance of the Name class.
      #
      # @param [String] as_recorded the name as recorded
      # @param [String] role the role associated with the name
      # @param [String] vernacular the vernacular form of the name
      # @param [String] ref a reference identifier for the name
      def initialize(as_recorded:, role:, vernacular:, ref:)
        @as_recorded = as_recorded
        @role = role
        @vernacular = vernacular
        @ref = ref
      end

      # Returns an array representation of the attributes.
      #
      # @return [Array<String>] an array containing the attributes in order
      def to_a
        [as_recorded, role, vernacular, ref]
      end

      # Returns a hash representation of the attributes.
      #
      # @return [Hash{Symbol => String}] a hash with attribute names as keys and values as values
      def to_h
        {
          as_recorded: as_recorded,
          role: role,
          vernacular: vernacular,
          ref: ref
        }
      end
    end
  end
end