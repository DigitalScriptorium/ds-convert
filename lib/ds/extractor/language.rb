# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

module DS
  module Extractor

    # Represents a language with specific attributes.
    class Language < DS::Extractor::TermBase
      # @!attribute [rw] as_recorded
      #   @return [String] the language as recorded
      attr_accessor :as_recorded

      # @!attribute [rw] codes
      #   @return [Array<String>] an array of language codes associated with the language
      attr_accessor :codes

      # Initializes a new instance of the Language class.
      #
      # @param [String] as_recorded the language as recorded
      # @param [Array<String>] codes an array of language codes associated with the language
      def initialize(as_recorded:, codes:)
        @as_recorded = as_recorded
        @codes = codes
      end

      # Returns an array representation of the attributes.
      #
      # @return [Array<String>] an array containing the attributes in order
      def to_a
        [as_recorded, codes]
      end

      # Returns a hash representation of the attributes.
      #
      # @return [Hash{Symbol => String|Array<String>}] a hash with attribute names as keys and values as values
      def to_h
        {
          as_recorded: as_recorded,
          codes: codes
        }
      end
    end

  end
end