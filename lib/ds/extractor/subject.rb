# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

module DS
  module Extractor

    # Represents a subject with specific attributes.
    class Subject < DS::Extractor::TermBase
      # @!attribute [rw] as_recorded
      #   @return [String] the subject as recorded
      attr_accessor :as_recorded

      # @!attribute [rw] subfield_codes
      #   @return [Array<String>] an array of subfield codes associated with the subject
      attr_accessor :subfield_codes

      # @!attribute [rw] vocab
      #   @return [String] the vocabulary associated with the subject
      attr_accessor :vocab

      # @!attribute [rw] source_authority_uri
      #   @return [String] the source authority URI for the subject
      attr_accessor :source_authority_uri

      # Initializes a new instance of the Subject class.
      #
      # @param [String] as_recorded the subject as recorded
      # @param [Array<String>] subfield_codes an array of subfield codes associated with the subject
      # @param [String] vocab the vocabulary associated with the subject
      # @param [String] source_authority_uri the source authority URI for the subject
      def initialize(as_recorded:, subfield_codes:, vocab:, source_authority_uri:)
        @as_recorded = as_recorded
        @subfield_codes = subfield_codes
        @vocab = vocab
        @source_authority_uri = source_authority_uri
      end

      # Returns an array representation of the attributes.
      #
      # @return [Array<String>] an array containing the attributes in order
      def to_a
        [as_recorded, subfield_codes, vocab, source_authority_uri]
      end

      # Returns a hash representation of the attributes.
      #
      # @return [Hash{Symbol => String|Array<String>}] a hash with attribute names as keys and values as values
      def to_h
        {
          as_recorded: as_recorded,
          subfield_codes: subfield_codes,
          vocab: vocab,
          source_authority_uri: source_authority_uri
        }
      end
    end
  end
end