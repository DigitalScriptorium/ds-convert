# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

require 'spec_helper'

RSpec.context DS::Extractor::Language do
  let(:language) { described_class.new(as_recorded: 'English', codes: ['en']) }

  context '#as_recorded' do
    it 'should have a readable as_recorded attribute' do
      expect(language.as_recorded).to eq('English')
    end

    it 'should have a writable as_recorded attribute' do
      language.as_recorded = 'Spanish'
      expect(language.as_recorded).to eq('Spanish')
    end
  end

  context '#codes' do
    it 'should have a readable codes attribute' do
      expect(language.codes).to eq(['en'])
    end

    it 'should have a writable codes attribute' do
      language.codes = ['es']
      expect(language.codes).to eq(['es'])
    end
  end

  context '#initialize' do
    it 'should initialize the language with the given attributes' do
      expect(language.as_recorded).to eq('English')
      expect(language.codes).to eq(['en'])
    end

    it 'should be an instance of DS::Extractor::Language' do
      expect(language).to be_an_instance_of(DS::Extractor::Language)
    end
  end

  context '#to_a' do
    it 'should return an array representation of the attributes' do
      expect(language.to_a).to eq(['English', ['en']])
    end
  end

  context '#to_h' do
    it 'should return a hash representation of the attributes' do
      expect(language.to_h).to eq({ as_recorded: 'English', codes: ['en'] })
    end
  end

  context 'implements TermBase interface' do
    it 'should implement the to_a method' do
      expect(language).to respond_to(:to_a)
    end

    it 'should not raise an error when calling to_a method' do
      expect { language.to_a }.not_to raise_error
    end

    it 'should implement the to_h method' do
      expect(language).to respond_to(:to_h)
    end

    it 'should not raise an error when calling to_h method' do
      expect { language.to_h }.not_to raise_error
    end
  end
end