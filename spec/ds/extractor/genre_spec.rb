# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

require 'spec_helper'

module DS
  module Extractor
    RSpec.describe Genre do
      let(:genre) do
        described_class.new(
          as_recorded: 'Fiction',
          vocab: 'Library of Congress Genre/Form Terms',
          source_authority_uri: 'http://example.com/genre'
        )
      end

      context '#as_recorded' do
        it 'should have a readable as_recorded attribute' do
          expect(genre.as_recorded).to eq('Fiction')
        end

        it 'should have a writable as_recorded attribute' do
          genre.as_recorded = 'Non-Fiction'
          expect(genre.as_recorded).to eq('Non-Fiction')
        end
      end

      context '#vocab' do
        it 'should have a readable vocab attribute' do
          expect(genre.vocab).to eq('Library of Congress Genre/Form Terms')
        end

        it 'should have a writable vocab attribute' do
          genre.vocab = 'Other Vocabulary'
          expect(genre.vocab).to eq('Other Vocabulary')
        end
      end

      context '#source_authority_uri' do
        it 'should have a readable source_authority_uri attribute' do
          expect(genre.source_authority_uri).to eq('http://example.com/genre')
        end

        it 'should have a writable source_authority_uri attribute' do
          genre.source_authority_uri = 'http://new-example.com/genre'
          expect(genre.source_authority_uri).to eq('http://new-example.com/genre')
        end
      end

      context '#initialize' do
        it 'should initialize the genre with the given attributes' do
          expect(genre.as_recorded).to eq('Fiction')
          expect(genre.vocab).to eq('Library of Congress Genre/Form Terms')
          expect(genre.source_authority_uri).to eq('http://example.com/genre')
        end

        it 'should be an instance of DS::Extractor::Genre' do
          expect(genre).to be_an_instance_of(DS::Extractor::Genre)
        end
      end

      context '#to_a' do
        it 'should return an array representation of the attributes' do
          expect(genre.to_a).to eq(['Fiction', 'Library of Congress Genre/Form Terms', 'http://example.com/genre'])
        end
      end

      context '#to_h' do
        it 'should return a hash representation of the attributes' do
          expect(genre.to_h).to eq({
                                     as_recorded: 'Fiction',
                                     vocab: 'Library of Congress Genre/Form Terms',
                                     source_authority_uri: 'http://example.com/genre'
                                   })
        end
      end
    end
  end
end