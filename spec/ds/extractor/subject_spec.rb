# frozen_string_literal: true

# Initial draft of this code generated by Doug Emery using GPT-3.5
# Date: 2023-12-17

require 'spec_helper'

RSpec.context DS::Extractor::Subject do
  let(:subject) do
    described_class.new(
      as_recorded: 'Topic',
      subfield_codes: ['A', 'B'],
      vocab: 'Library of Congress Subject Headings',
      source_authority_uri: 'http://example.com/subject'
    )
  end

  context '#as_recorded' do
    it 'should have a readable as_recorded attribute' do
      expect(subject.as_recorded).to eq('Topic')
    end

    it 'should have a writable as_recorded attribute' do
      subject.as_recorded = 'New Topic'
      expect(subject.as_recorded).to eq('New Topic')
    end
  end

  context '#subfield_codes' do
    it 'should have a readable subfield_codes attribute' do
      expect(subject.subfield_codes).to eq(['A', 'B'])
    end

    it 'should have a writable subfield_codes attribute' do
      subject.subfield_codes = ['C']
      expect(subject.subfield_codes).to eq(['C'])
    end
  end

  context '#vocab' do
    it 'should have a readable vocab attribute' do
      expect(subject.vocab).to eq('Library of Congress Subject Headings')
    end

    it 'should have a writable vocab attribute' do
      subject.vocab = 'Other Vocabulary'
      expect(subject.vocab).to eq('Other Vocabulary')
    end
  end

  context '#source_authority_uri' do
    it 'should have a readable source_authority_uri attribute' do
      expect(subject.source_authority_uri).to eq('http://example.com/subject')
    end

    it 'should have a writable source_authority_uri attribute' do
      subject.source_authority_uri = 'http://new-example.com/subject'
      expect(subject.source_authority_uri).to eq('http://new-example.com/subject')
    end
  end

  context '#initialize' do
    it 'should initialize the subject with the given attributes' do
      expect(subject.as_recorded).to eq('Topic')
      expect(subject.subfield_codes).to eq(['A', 'B'])
      expect(subject.vocab).to eq('Library of Congress Subject Headings')
      expect(subject.source_authority_uri).to eq('http://example.com/subject')
    end

    it 'should be an instance of DS::Extractor::Subject' do
      expect(subject).to be_an_instance_of(DS::Extractor::Subject)
    end
  end

  context '#to_a' do
    it 'should return an array representation of the attributes' do
      expect(subject.to_a).to eq(['Topic', ['A', 'B'], 'Library of Congress Subject Headings', 'http://example.com/subject'])
    end
  end

  context '#to_h' do
    it 'should return a hash representation of the attributes' do
      expect(subject.to_h).to eq({
                                   as_recorded: 'Topic',
                                   subfield_codes: ['A', 'B'],
                                   vocab: 'Library of Congress Subject Headings',
                                   source_authority_uri: 'http://example.com/subject'
                                 })
    end
  end

  context 'implements TermBase interface' do
    it 'should implement the to_a method' do
      expect(subject).to respond_to(:to_a)
    end

    it 'should not raise an error when calling to_a method' do
      expect { subject.to_a }.not_to raise_error
    end

    it 'should implement the to_h method' do
      expect(subject).to respond_to(:to_h)
    end

    it 'should not raise an error when calling to_h method' do
      expect { subject.to_h }.not_to raise_error
    end
  end
end