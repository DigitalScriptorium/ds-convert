#!/usr/bin/env ruby

require 'csv'
require 'optparse'
require_relative '../lib/ds'

##
# Extract the contents of a column or columns from the input csv, split pipe-
# separated fields and create an output of distinct rows (i.e., no duplicates).
#

options = {}
options[:separator] = ','

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} CSV_FILE"

  opts.on '-s', '--separator SEP', 'Separator for multiple columns' do |sep|
    options[:separator] = sep
  end

  opts.on '-h', '--help', 'Prints this help' do
    puts opts
    exit
  end
end.parse!

csv_file = ARGV.shift

abort "Please provide a CSV file" unless csv_file
abort "Can't find CSV file" unless File.exist? csv_file


data = []

sets = {
  'name|name_agr' => [
    %w{author_as_recorded	author_as_recorded_agr},
    %w{artist_as_recorded	artist_as_recorded_agr},
    %w{scribe_as_recorded	scribe_as_recorded_agr},
    %w{former_owner_as_recorded	former_owner_as_recorded_agr}
  ],
  'production_place' => [
    %w{ production_place_as_recorded }
  ],
  'genre_lcsh' => [
    %w{genre_as_recorded_lcsh  }
  ],
  'genre_aat' => [
    %w{ genre_as_recorded_aat }
  ],
  'genre_rbprov' => [
    %w{ genre_as_recorded_rbprov }
  ],
  'genre_lcgft' => [
    %w{ genre_as_recorded_lcgft }
  ],
  'named_subject' => [
    %w{ named_subject_as_recorded }
  ],
  'subject' => [
    %w{ subject_as_recorded }
  ],
  'language' => [
    %w{ language_as_recorded language}
  ],
  'material' => [
    %w{ material_placeholder material }
  ]
}


sets.each do |heads, columns|
  headers = heads.split '|'
  file_name = headers.first
  data = []
  columns.each do |name, agr|
    data += DS::CSVUtil.zip_columns csv_file, name, agr
  end
  data.sort! { |a,b| a.first <=> b.first }
  data.uniq!
  CSV.open "#{file_name}.csv", 'wb', col_sep: options[:separator] do |csv|
    csv << headers
    data.each do |row|
      next if row.first.to_s.size > 100
      csv << row
    end
  end
  puts "Wrote #{file_name}.csv"
end







